/*
 * File: app/controller/Navigation.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DecisionLink.controller.Navigation', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainView: '#mainView',
            navMenu: {
                selector: '#navMenu',
                xtype: 'navmenu'
            },
            savedList: 'searchpanel #savedList',
            detailPanel: 'detailpanel',
            overviewList: '#overviewList',
            loginPanel: '#loginPanel',
            validateList: '#validateList',
            navBar: '#navBar',
            searchList: 'homepanel #searchListContainer #searchList',
            detailList: 'detailpanel #detailList',
            accountScenariosList: 'accountscenariospanel #accountScenariosList',
            companyScenariosList: 'companyscenariospanel #companyScenariosList',
            companyViewPanel: 'companyviewpanel',
            oppOverviewList: 'opportunitycarousel #oppOverviewList',
            salesQuestionsList: 'opportunitycarousel #opportunitySalesQPanel #salesQuestionsList',
            salesQuestionDetailPanel: 'salesquestiondetailpanel',
            valueFormulasList: 'opportunitycarousel #valueFormulasList',
            valueFormulaDetailPanel: 'valueformuladetailpanel',
            opportunityCostsList: 'opportunitycarousel #opportunityCostsList',
            opportunityCostDetailPanel: 'opportunitycostdetailpanel',
            opportunityAssetsList: 'opportunitycarousel #opportunityAssetsList',
            assetDetailPanel: 'assetdetailpanel',
            dnbOverviewList: 'dnbcarousel #dnbOverviewList',
            divisionsList: 'dnbcarousel #divisionsList',
            competitorsList: 'dnbcarousel #competitorsList',
            employeesList: 'dnbcarousel #employeesList',
            kpisList: 'competitivecarousel #kpisList',
            kpiDetailList: 'kpidetailpanel #kpiDetailListContainer #kpiDetailList',
            closestPeersList: 'competitivecarousel #closestPeersList',
            peerPerformanceList: 'competitivecarousel #peerPerformanceList',
            hiddenList: 'homepanel #hiddenList',
            companyScenariosPanel: 'companyscenariospanel',
            industriesList: 'opportunitycarousel #industriesList',
            secondarySQQDetailPanel: 'secondarysqqdetailpanel',
            secondarySQQList: 'opportunitycarousel #secondarySQQList',
            baselinesField: 'opportunitycarousel #baselinesField',
            deleteCostActionSheet: 'opportunitycostdetailpanel #deleteCostActionSheet',
            scenarioField: 'opportunitycarousel #scenarioField',
            scenarioCompetitorsList: 'opportunitycarousel #competitorsList',
            changePasswordPanel: 'changepasswordpanel',
            sellingIntoField: 'opportunitycarousel #sellingIntoField',
            currencySelectField: 'changeCurrencyPanel #currencySelectField',
            accountPanel: 'accountpanel',
            opportunitySituationPanel: 'opportunitycarousel #opportunitySituationPanel',
            vpList: 'homepanel #homeContainer #VPListContainer #VPList',
            solutionsList: 'newvppanel #newInfoContainer #solutionsListContainer #solutionsList',
            sendAssetPanel: 'sendassetpanel',
            homePanel: 'homepanel'
        },

        control: {
            "navmenu button": {
                tap: 'navigate'
            },
            "mainview #menuButton": {
                tap: 'showMenu'
            },
            "#cancelButton": {
                tap: 'onCancelLoginButtonTap'
            },
            "homepanel #searchListContainer #searchList": {
                itemtap: 'onSearchListItemTap'
            },
            "accountscenariospanel #accountScenariosList": {
                activate: 'onAccountScenariosListActivate',
                itemtap: 'onAccountScenariosListItemTap'
            },
            "searchpanel #savedList": {
                itemtap: 'onSavedListItemTap'
            },
            "searchpanel #savedPanel": {
                activate: 'onSavedListActivate'
            },
            "homepanel #homeContainer #searchField": {
                action: 'onSearchfieldAction'
            },
            "#loginButton": {
                tap: 'onLoginButtonTap'
            },
            "navigationview": {
                back: 'onMainViewBack'
            },
            "companyviewpanel #companyInfoCheckBox": {
                check: 'onCompanyInfoCheck'
            },
            "mainview #navBar #login": {
                tap: 'onShowLogin'
            },
            "companyviewpanel #valuePropCheckBox": {
                check: 'onValuePropCheck'
            },
            "opportunitycarousel #oppOverviewList": {
                itemtap: 'onOpportunityTap'
            },
            "opportunitycarousel": {
                activate: 'onOpptyCarouselActivate'
            },
            "opportunitycarousel #salesQuestionsList": {
                itemtap: 'onSQQListItemTap'
            },
            "opportunitycarousel #valueFormulasList": {
                itemtap: 'onVFListItemTap'
            },
            "opportunitycarousel #opportunityCostsList": {
                itemtap: 'onCostListItemTap'
            },
            "opportunitycarousel #opportunityAssetsList": {
                itemtap: 'onAssetItemTap'
            },
            "companyscenariospanel #companyScenariosList": {
                itemtap: 'onCompanyScenariosListItemTap'
            },
            "dnbcarousel": {
                activate: 'onDNBCarouselActivate'
            },
            "companyviewpanel #dnbInfoCheckBox": {
                check: 'onDNBInfoCheck'
            },
            "dnbcarousel #divisionsList": {
                itemtap: 'onDivisionsListItemTap'
            },
            "dnbcarousel #competitorsList": {
                itemtap: 'onCompetitorsListItemTap'
            },
            "companyviewpanel #competitiveCheckBox": {
                check: 'onCompetitiveCheck'
            },
            "competitivecarousel #kpisList": {
                itemtap: 'onKpisListItemTap'
            },
            "competitivecarousel": {
                activate: 'onCompetitiveCarouselActivate'
            },
            "competitivecarousel #closestPeersList": {
                itemtap: 'onClosestPeersListItemTap'
            },
            "competitivecarousel #peerPerformanceList": {
                itemtap: 'onPerformanceListItemTap'
            },
            "salesquestiondetailpanel #saveSQQButton": {
                tap: 'onSaveSQQButtonTap'
            },
            "opportunitycostdetailpanel #saveCostButton": {
                tap: 'onSaveCostButtonTap'
            },
            "valueformuladetailpanel #saveValueFormulaButton": {
                tap: 'onSaveVFButtonTap'
            },
            "opportunitycarousel #secondarySQQList": {
                itemtap: 'onSecondarySQQListItemTap'
            },
            "secondarysqqdetailpanel #saveSecondarySQQButton": {
                tap: 'onSaveSecondarySQQButtonTap'
            },
            "mainview #navBar #newCostButton": {
                tap: 'onNewCostButtonTap'
            },
            "mainview #navBar #deleteCostButton": {
                tap: 'onDeleteCostButtonTap'
            },
            "opportunitycostdetailpanel #deleteCostActionSheet #deleteCostButton": {
                tap: 'onDeleteCostActionButtonTap'
            },
            "opportunitycostdetailpanel #deleteCostActionSheet #cancelDeleteButton": {
                tap: 'onCancelCostActionButtonTap'
            },
            "opportunitycarousel #saveSituationButton": {
                tap: 'onSaveSituationButtonTap'
            },
            "loginPanel": {
                hide: 'onLoginPanelHide'
            },
            "accountpanel #changeCurrencyButton": {
                tap: 'onShowCurrencyButtonTap'
            },
            "homepanel": {
                activate: 'onHomePanelActivate'
            },
            "assetdetailpanel #downloadImage": {
                tap: 'onDownloadImageTap'
            },
            "accountpanel #logoutButton": {
                tap: 'onLogoutButtonTap'
            },
            "accountpanel": {
                activate: 'onAccountPanelActivate'
            },
            "changecurrencypanel #changeCurrencyButton": {
                tap: 'onSaveCurrencyButtonTap'
            },
            "accountpanel #changePasswordButton": {
                tap: 'onShowChangePasswordButtonTap'
            },
            "changepasswordpanel #changePasswordButton": {
                tap: 'onChangePasswordButtonTap'
            },
            "mainview #navBar #newVPButton": {
                tap: 'onNewVPButtonTap'
            },
            "newvppanel #saveVPButtonContainer #saveVPButton": {
                tap: 'onSaveVPButtonTap'
            },
            "newvppanel #accountRevenueCheckbox": {
                check: 'onChangeRevenueCheck',
                uncheck: 'onChangeRevenueUncheck'
            },
            "sendassetpanel #buttonContainer #cancelSendButton": {
                tap: 'onCancelSendButtonTap'
            }
        }
    },

    navigate: function(button, e, eOpts) {

        /**
        *	The following code enables navigation
        *	by checking the custom attribute 'navView',
        *	which is the alias of the view to show
        */

        var text = button.getText(),						// Button text
        	navView = button.getInitialConfig().navView,	// Get custom attribute 'navView'
        	mainView = this.getMainView(),					// Main navigation view
        	navMenu = this.getNavMenu();					// Navigation menu

        // Add view to main view
        mainView.push({
            xtype: navView,
            title: text
        });

        // Remember current view alias
        this.currentView = navView;

        // Hide menu
        navMenu.hide();

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[0].hide();

        rightButton = navBar.rightBox.query('button')[0];
        if (rightButton) {
            rightButton.destroy();
        }

        DecisionLink.app.setPagesFromHome(0);
    },

    showMenu: function(target) {

        // Get or create navigation menu
        var menu = this.getNavMenu(),
            validated = DecisionLink.app.isValidated();
        if (!menu) {
            menu = Ext.create('widget.navmenu');
        }

        var menuItems = menu.getItems().items,				// Menu buttons
        	currentView = this.currentView || "homepanel";	// Current view alias, default to home

        // Show menu by menu button
        if (validated) {
            menu.showBy(target);
        } else {
            window.alert("Please login");
        }
    },

    onCancelLoginButtonTap: function(button, e, eOpts) {
        menu = this.getLoginPanel();

        menu.hide();
    },

    onSearchListItemTap: function(dataview, index, target, record, e, eOpts) {
        var details,
            me = this;

        if (record) {
            DecisionLink.app.setCurrentCompanyId(record.get('id'));
            DecisionLink.app.setCurrentCompany(record.get('name'));
            DecisionLink.app.setCurrentIndustryId(record.get('industry_id'));
            DecisionLink.app.setCurrentRevenue(record.get('revenue'));

            details = Ext.create('DecisionLink.view.CompanyViewPanel', {
                title: record.get('name')
            });

            this.getMainView().push(details);

            var navBar = this.getNavBar();
            navBar.leftBox.query('button')[1].hide();

            DecisionLink.app.incrementPagesFromHome();
        }
    },

    onAccountScenariosListActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var me = this,
            account_id = DecisionLink.app.getAccountId();

        me.getNavBar().setTitle("My Accounts");

        Ext.Viewport.setMasked({message: 'Loading...'});

        me.getAccountScenarios(account_id, function(store) {
            me.getAccountScenariosList().setStore(store);

            Ext.Viewport.setMasked(false);
        });
    },

    onAccountScenariosListItemTap: function(dataview, index, target, record, e, eOpts) {
        var carousel,
            details,
            yr1_cost_sum = '$' + DecisionLink.app.formatCurrency( record.get('yr1_cost_sum') ),
            yrx_cost_sum = '$' + DecisionLink.app.formatCurrency( record.get('yrx_cost_sum') ),
            yr1_benefit_sum = '$' + DecisionLink.app.formatCurrency( record.get('yr1_benefit_sum') ),
            yr2_benefit_sum = '$' + DecisionLink.app.formatCurrency( record.get('yr2_benefit_sum') ),
            yr3_benefit_sum = '$' + DecisionLink.app.formatCurrency( record.get('yr3_benefit_sum') ),
            wacc = record.get('wacc'),
            term = record.get('term'),
            bur = '$' + DecisionLink.app.formatCurrency( record.get('oppty_revenue') ),
            cost_light_image = record.get('cost_light_image'),
            benefit_light_image = record.get('benefit_light_image'),
            me = this;


        Ext.Viewport.setMasked({message: 'Loading...'});

        carousel = Ext.create('DecisionLink.view.OpportunityCarousel', {
            title: record.get('name')
        });

        details = carousel.child('#opportunityOverviewPanel');

        details.child('#yr1CostsField').setValue(yr1_cost_sum);
        details.child('#ongoingCostsField').setValue(yrx_cost_sum);

        details.child('#yr1BenefitsField').setValue(yr1_benefit_sum);
        details.child('#yr2BenefitsField').setValue(yr2_benefit_sum);
        details.child('#yr3BenefitsField').setValue(yr3_benefit_sum);

        details.child('#waccField').setValue(wacc);
        details.child('#termField').setValue(term);
        details.child('#burField').setValue(bur);

        details.child('#imageContainer').child('#costLightImage').setSrc(cost_light_image);
        details.child('#imageContainer').child('#benefitLightImage').setSrc(benefit_light_image);

        DecisionLink.app.setCurrentOpptyId(record.get('id'));

        situation = carousel.child('#opportunitySituationPanel');
        situation.child('#costOfCapitalField').setValue(wacc);
        situation.child('#termField').setValue(term);

        Ext.Viewport.setMasked(false);

        this.getMainView().push(carousel);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onSavedListItemTap: function(dataview, index, target, record, e, eOpts) {
        var details,
            me = this;

        if (record) {
            DecisionLink.app.setCurrentCompanyId(record.get('id'));
            DecisionLink.app.setCurrentCompany(record.get('name'));
            DecisionLink.app.setCurrentIndustryId(record.get('industry_id'));
            DecisionLink.app.setCurrentRevenue(record.get('revenue'));

            details = Ext.create('DecisionLink.view.CompanyViewPanel', {
                title: record.get('name')
            });

            this.getMainView().push(details);

            var navBar = this.getNavBar();
            navBar.leftBox.query('button')[1].hide();

            DecisionLink.app.incrementPagesFromHome();
        }
    },

    onSavedListActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var me = this,
            id = DecisionLink.app.getUserId();

        Ext.Viewport.setMasked({message: 'Loading...'});

        me.getSavedAccounts(id, function(store) {
            me.getSavedList().setStore(store);

            Ext.Viewport.setMasked(false);
        });
    },

    onSearchfieldAction: function(textfield, e, eOpts) {
        var overview,
            searchPanel,
            option,
            validated = DecisionLink.app.isValidated(),
            me = this;

        homePanel = me.getHomePanel();
        option = homePanel.child('#homeContainer').child('#selectField').getValue();
        searchTerm = textfield.getValue();

        if (validated) {
            me.searchCompanies(searchTerm, option, function (store) {
                me.getSearchList().setStore(store);
            });
        } else {
            window.alert("Please log in");
        }
    },

    onLoginButtonTap: function(button, e, eOpts) {
        var username,
            password,
            usernameField,
            passwordField,
            me = this;

        usernameField = me.getLoginPanel().child('#usernameField');
        passwordField = me.getLoginPanel().child('#passwordField');

        username = usernameField.getValue();
        password = passwordField.getValue();

        password = me.toMD5(password);

        Ext.Viewport.setMasked({message: 'Loading...'});

        me.getValidation(username, password, function (store) {
            me.getValidateList().setStore(store);

            me.getLoginPanel().hide();

            Ext.Viewport.setMasked(false);
        });

    },

    onMainViewBack: function(navigationview, eOpts) {
        var navBar = this.getNavBar(),
            pagesFromHome = DecisionLink.app.getPagesFromHome();

        if (pagesFromHome == 1) {
            navBar.leftBox.query('button')[0].hide();
            navBar.leftBox.query('button')[1].show();
        }

        DecisionLink.app.decrementPagesFromHome();

    },

    onCompanyInfoCheck: function(checkboxfield, e, eOpts) {
        var details,
            id,
            me = this;

        checkboxfield.uncheck();

        Ext.Viewport.setMasked({message: 'Loading...'});

        id = DecisionLink.app.getCurrentCompanyId();

        me.getCompanyOverview(id, function(store) {
            me.getDetailList().setStore(store);

            Ext.Viewport.setMasked(false);
        });

        details = Ext.create('DecisionLink.view.DetailPanel', {});

        me.getMainView().push(details);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onShowLogin: function(button, e, eOpts) {
        var menu = this.getLoginPanel();
        if (!menu) {
            menu = Ext.create('widget.loginPanel');
        }

        menu.child('#passwordField').reset();

        if (!DecisionLink.app.isValidated()) {
            menu.showBy(button);
        } else {
            alert("You are already logged in.");
        }
    },

    onValuePropCheck: function(checkboxfield, e, eOpts) {
        var details,
            id,
            me = this;

        checkboxfield.uncheck();

        Ext.Viewport.setMasked({message: 'Loading...'});

        user_id = DecisionLink.app.getUserId();
        company_id = DecisionLink.app.getCurrentCompanyId();

        me.getCompanyScenarios(user_id, company_id, function(store) {
            me.getCompanyScenariosList().setStore(store);

            Ext.Viewport.setMasked(false);
        });

        details = Ext.create('DecisionLink.view.CompanyScenariosPanel', {
            title: 'Value Propositions'
        });

        me.getMainView().push(details);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onOpportunityTap: function(dataview, index, target, record, e, eOpts) {
        var opportunity,
            me = this;

        if (record) {
            Ext.Viewport.setMasked({message: 'Loading...'});

            me.getOpportunityOverview(record.get('id'), function(store) {
                me.getOppOverviewList().setStore(store);

                Ext.Viewport.setMasked(false);
            });

            details = Ext.create('DecisionLink.view.OpportunityCarousel', {
                title: record.get('name')
            });

            DecisionLink.app.setCurrentOppty(record.get('id'));

            this.getMainView().push(details);

            var navBar = this.getNavBar();
            navBar.leftBox.query('button')[1].hide();

            DecisionLink.app.incrementPagesFromHome();
        }
    },

    onOpptyCarouselActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var me = this,
            id = DecisionLink.app.getCurrentOpptyId(),
            user_id = DecisionLink.app.getUserId();

        Ext.Viewport.setMasked({message: 'Loading...'});

        // Load in scenario areas
        me.getScenarioAreas(user_id, id, function(store) {
           me.getSellingIntoField().setStore(store);
        });

        // Load in scenario industries
        me.getScenarioIndustries(user_id, id, function(store) {
           me.getIndustriesList().setStore(store);
        });

        // Load in scenario competitors
        me.getScenarioCompetitors(user_id, id, function(store) {
           me.getScenarioCompetitorsList().setStore(store);
        });

        // Load in scenario baselines
        me.getScenarioBaselines(user_id, id, function(store) {
           me.getBaselinesField().setStore(store);
        });

        // Load in selling scenario
        me.getSellingScenario(user_id, id, function(store) {
           me.getScenarioField().setStore(store);
        });

        // Load in sales questions
        me.getSalesQuestions(id, function(store) {
            me.getSalesQuestionsList().setStore(store);
        });

        // Load in secondary sales questions
        me.getSecondarySQQs(id, function(store) {
            me.getSecondarySQQList().setStore(store);
        });

        // Load in value formulas
        me.getValueFormulas(id, function(store) {
            me.getValueFormulasList().setStore(store);
        });

        // Load in opportunity costs
        me.getOpportunityCosts(id, user_id, function(store) {
            me.getOpportunityCostsList().setStore(store);
        });

        // Load in assets
        me.getOpportunityAssets(user_id, id, function(store) {
            me.getOpportunityAssetsList().setStore(store);

            Ext.Viewport.setMasked(false);
        });
    },

    onSQQListItemTap: function(dataview, index, target, record, e, eOpts) {
        var details,
            name = record.get('name'),
            sqq_estimate = '$' + DecisionLink.app.formatCurrency( record.get('sqq_estimate') ),
            sqq_override = record.get('sqq_override'),
            source_name = record.get('source_name'),
            source_type_id = record.get('source_type_id'),
            sqq_id = record.get('sqq_id'),
            me = this;

        Ext.Viewport.setMasked({message: 'Loading...'});

        details = Ext.create('DecisionLink.view.SalesQuestionDetailPanel', {
            title: 'Sales Question Details'
        });

        details.child('#salesQuestionField').setValue(name);
        details.child('#engineEstimateField').setValue(sqq_estimate);
        details.child('#revisedAnswerField').setValue(sqq_override);
        details.child('#sourceSelectField').setValue(source_type_id);
        details.child('#sqqIdField').setValue(sqq_id);

        Ext.Viewport.setMasked(false);

        this.getMainView().push(details);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onVFListItemTap: function(dataview, index, target, record, e, eOpts) {
        var details,
            metric = record.get('metric'),
            metric_id = record.get('metric_id'),
            sqq = record.get('sqq'),
            sqq_value = record.get('sqq_value'),
            impact = record.get('impact'),
            abbr = record.get('abbr'),
            source_type_id = record.get('source_type_id'),
            sqq2 = record.get('sqq2'),
            sqq2_value = record.get('sqq2_value'),
            total = '$' + DecisionLink.app.formatCurrency( record.get('y1_raw') ),
            alt_metric_id = record.get('alt_metric_id'),
            unit_type_id = record.get('unit_type_id'),
            me = this;

        Ext.Viewport.setMasked({message: 'Loading...'});

        details = Ext.create('DecisionLink.view.ValueFormulaDetailPanel', {
            title: 'Value Formula Details',
            alt_metric_id: alt_metric_id
        });

        details.child('#metricField').setValue(metric);
        details.child('#driverFactorField').setValue(sqq);
        details.child('#driverFactorValueField').setValue(sqq_value);

        details.child('#improveFactorSpinner').setValue(impact);
        details.child('#improveFactorUnitField').setValue(abbr);
        details.child('#sourceSelectField').setValue(source_type_id);

        details.child('#financialFactorField').setValue(sqq2);
        details.child('#financialFactorValueSpinner').setValue(sqq2_value);

        details.child('#valueFormulaTotalField').setValue(total);
        details.child('#metricIdField').setValue(metric_id);
        details.child('#unitTypeIdField').setValue(unit_type_id);

        Ext.Viewport.setMasked(false);

        this.getMainView().push(details);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onCostListItemTap: function(dataview, index, target, record, e, eOpts) {
        var details,
            cost_type_id = record.get('cost_type_id'),
            cost = record.get('cost'),
            accrual_type_id = record.get('accrual_type_id'),
            id = record.get('id'),
            me = this;

        Ext.Viewport.setMasked({message: 'Loading...'});

        details = Ext.create('DecisionLink.view.OpportunityCostDetailPanel', {
            title: 'Cost Details'
        });

        details.child('#costTypeSelectField').setValue(cost_type_id);
        details.child('#costValueField').setValue(cost);
        details.child('#accrualTypeSelectField').setValue(accrual_type_id);
        details.child('#costIdField').setValue(id);

        Ext.Viewport.setMasked(false);

        this.getMainView().push(details);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onAssetItemTap: function(dataview, index, target, record, e, eOpts) {
        var details,
            name= record.get('name'),
            description = record.get('description'),
            icon = record.get('icon'),
            url = record.get('url'),
            me = this;

        Ext.Viewport.setMasked({message: 'Loading...'});

        details = Ext.create('DecisionLink.view.AssetDetailPanel', {
            title: 'Asset Details',
            downloadUrl: url
        });

        details.child('#assetNameField').setValue(name);
        details.child('#assetDescriptionField').setValue(description);
        details.child('#downloadImage').setSrc(icon);
        details.child('#downloadImage').downloadUrl = url;

        Ext.Viewport.setMasked(false);

        this.getMainView().push(details);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onCompanyScenariosListItemTap: function(dataview, index, target, record, e, eOpts) {
        var carousel,
            details,
            yr1_cost_sum = '$' + DecisionLink.app.formatCurrency( record.get('yr1_cost_sum') ),
            yrx_cost_sum = '$' + DecisionLink.app.formatCurrency( record.get('yrx_cost_sum') ),
            yr1_benefit_sum = '$' + DecisionLink.app.formatCurrency( record.get('yr1_benefit_sum') ),
            yr2_benefit_sum = '$' + DecisionLink.app.formatCurrency( record.get('yr2_benefit_sum') ),
            yr3_benefit_sum = '$' + DecisionLink.app.formatCurrency( record.get('yr3_benefit_sum') ),
            wacc = record.get('wacc'),
            term = record.get('term'),
            bur = '$' + DecisionLink.app.formatCurrency( record.get('oppty_revenue') ),
            cost_light_image = record.get('cost_light_image'),
            benefit_light_image = record.get('benefit_light_image'),
            me = this;


        Ext.Viewport.setMasked({message: 'Loading...'});

        carousel = Ext.create('DecisionLink.view.OpportunityCarousel', {
            title: record.get('name')
        });

        details = carousel.child('#opportunityOverviewPanel');

        details.child('#yr1CostsField').setValue(yr1_cost_sum);
        details.child('#ongoingCostsField').setValue(yrx_cost_sum);

        details.child('#yr1BenefitsField').setValue(yr1_benefit_sum);
        details.child('#yr2BenefitsField').setValue(yr2_benefit_sum);
        details.child('#yr3BenefitsField').setValue(yr3_benefit_sum);

        details.child('#waccField').setValue(wacc);
        details.child('#termField').setValue(term);
        details.child('#burField').setValue(bur);

        details.child('#imageContainer').child('#costLightImage').setSrc(cost_light_image);
        details.child('#imageContainer').child('#benefitLightImage').setSrc(benefit_light_image);

        DecisionLink.app.setCurrentOpptyId(record.get('id'));

        Ext.Viewport.setMasked(false);

        this.getMainView().push(carousel);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onDNBCarouselActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var me = this,
            company_id = DecisionLink.app.getCurrentCompanyId(),
            user_id = DecisionLink.app.getUserId();

        Ext.Viewport.setMasked({message: 'Loading...'});

        // Load in DNB Overview
        me.getDNBOverview(company_id, function(store) {
            me.getDnbOverviewList().setStore(store);
        });

        // Load in divisions/locations
        me.getDivisions(user_id, company_id, function(store) {
            me.getDivisionsList().setStore(store);
        });

        // Load in competitors
        me.getCompetitors(user_id, company_id, function(store) {
            me.getCompetitorsList().setStore(store);

        });

        // Load in employees
        me.getEmployees(company_id, function(store) {
            me.getEmployeesList().setStore(store);

            Ext.Viewport.setMasked(false);
        });
    },

    onDNBInfoCheck: function(checkboxfield, e, eOpts) {
        var carousel,
            me = this;

        checkboxfield.uncheck();

        Ext.Viewport.setMasked({message: 'Loading...'});

        carousel = Ext.create('DecisionLink.view.DNBCarousel', {
            title: 'Additional DnB Info'
        });

        Ext.Viewport.setMasked(false);

        this.getMainView().push(carousel);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onDivisionsListItemTap: function(dataview, index, target, record, e, eOpts) {
        var details,
            me = this;

        if (record) {
            DecisionLink.app.setCurrentCompanyId(record.get('id'));
            DecisionLink.app.setCurrentCompany(record.get('name'));

            details = Ext.create('DecisionLink.view.CompanyViewPanel', {
                title: record.get('name')
            });

            this.getMainView().push(details);

            var navBar = this.getNavBar();
            navBar.leftBox.query('button')[0].hide();
            navBar.leftBox.query('button')[1].show();

        }
    },

    onCompetitorsListItemTap: function(dataview, index, target, record, e, eOpts) {
        var details,
            me = this;

        if (record) {
            DecisionLink.app.setCurrentCompanyId(record.get('id'));
            DecisionLink.app.setCurrentCompany(record.get('name'));
            DecisionLink.app.setCurrentIndustryId(record.get('industry_id'));
            DecisionLink.app.setCurrentRevenue(record.get('revenue'));

            details = Ext.create('DecisionLink.view.CompanyViewPanel', {
                title: record.get('name')
            });

            this.getMainView().push(details);

            var navBar = this.getNavBar();
            navBar.leftBox.query('button')[0].hide();
            navBar.leftBox.query('button')[1].show();
        }
    },

    onCompetitiveCheck: function(checkboxfield, e, eOpts) {
        var panel,
            me = this;

        checkboxfield.uncheck();

        Ext.Viewport.setMasked({message: 'Loading...'});

        panel = Ext.create('DecisionLink.view.CompetitiveCarousel', {
            title: 'Competitive Performance'
        });

        Ext.Viewport.setMasked(false);

        this.getMainView().push(panel);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onKpisListItemTap: function(dataview, index, target, record, e, eOpts) {
        var kpi_id = record.get('kpi_id'),
            sqq_value = record.get('sqq_value'),
            name = record.get('name'),
            user_id = DecisionLink.app.getUserId(),
            company_id = DecisionLink.app.getCurrentCompanyId(),
            me = this;

        Ext.Viewport.setMasked({message: 'Loading...'});

        panel = Ext.create('DecisionLink.view.KpiDetailPanel', {
            title: 'KPI Details'
        });

        panel.child('#kpiNameField').setValue(name);
        panel.child('#kpiTotalField').setValue(sqq_value);

        me.getRatios(user_id, company_id, kpi_id, function(store) {
            me.getKpiDetailList().setStore(store);
        });

        Ext.Viewport.setMasked(false);

        this.getMainView().push(panel);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onCompetitiveCarouselActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var me = this,
            company_id = DecisionLink.app.getCurrentCompanyId(),
            user_id = DecisionLink.app.getUserId(),
            industry_id = DecisionLink.app.getCurrentIndustryId(),
            revenue = DecisionLink.app.getCurrentRevenue();

        Ext.Viewport.setMasked({message: 'Loading...'});

        // Load in KPIs
        me.getKpis(user_id, company_id, industry_id, function(store) {
            me.getKpisList().setStore(store);
        });

        // Load in 8 closest peers
        me.getClosestPeers(user_id, company_id, industry_id, revenue, function(store) {
            me.getClosestPeersList().setStore(store);
        });

        // Load in peer performance
        me.getCompRatios(user_id, company_id, function(store) {
            me.getPeerPerformanceList().setStore(store);

            Ext.Viewport.setMasked(false);
        });
    },

    onClosestPeersListItemTap: function(dataview, index, target, record, e, eOpts) {
        var details,
            me = this;

        if (record) {
            DecisionLink.app.setCurrentCompanyId(record.get('id'));
            DecisionLink.app.setCurrentCompany(record.get('name'));
            DecisionLink.app.setCurrentRevenue(record.get('revenue'));

            details = Ext.create('DecisionLink.view.CompanyViewPanel', {
                title: record.get('name')
            });

            this.getMainView().push(details);

            var navBar = this.getNavBar();
            navBar.leftBox.query('button')[0].hide();
            navBar.leftBox.query('button')[1].show();
        }
    },

    onPerformanceListItemTap: function(dataview, index, target, record, e, eOpts) {
        var name = record.get('name'),
            value = record.get('value'),
            industry = record.get('industry'),
            opportunity = record.get('opportunity'),
            onepercent = record.get('onepercent'),
            peerbest = record.get('peerbest'),
            me = this;

        Ext.Viewport.setMasked({message: 'Loading...'});

        panel = Ext.create('DecisionLink.view.PeerPerformanceDetailPanel', {
            title: 'Peer Performance Details'
        });

        panel.child('#ratioNameField').setValue(name);
        panel.child('#companyField').setValue(value);
        panel.child('#peersField').setValue(industry);
        panel.child('#onePercentField').setValue(onepercent);
        panel.child('#m2aField').setValue(opportunity);
        panel.child('#m2bField').setValue(peerbest);

        Ext.Viewport.setMasked(false);

        this.getMainView().push(panel);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onSaveSQQButtonTap: function(button, e, eOpts) {
        var sqqPanel,
            oppty_id = DecisionLink.app.getCurrentOpptyId(),
            sqq_id,
            sqq_override,
            source_type_id,
            me = this;

        sqqPanel = me.getSalesQuestionDetailPanel();
        sqq_id = sqqPanel.child('#sqqIdField').getValue();
        sqq_override = sqqPanel.child('#revisedAnswerField').getValue();
        source_type_id = sqqPanel.child('#sourceSelectField').getValue();

        me.updateOpportunitySQQ(sqq_id, sqq_override, source_type_id, oppty_id, function (store) {
            me.getHiddenList().setStore(store);
        });
    },

    onSaveCostButtonTap: function(button, e, eOpts) {
        var costPanel,
            oppty_id = DecisionLink.app.getCurrentOpptyId(),
            id,
            cost_type_id,
            accrual_type_id,
            cost,
            me = this;

        costPanel = me.getOpportunityCostDetailPanel();
        id = costPanel.child('#costIdField').getValue();
        cost_type_id = costPanel.child('#costTypeSelectField').getValue();
        accrual_type_id = costPanel.child('#accrualTypeSelectField').getValue();
        cost = costPanel.child('#costValueField').getValue();

        if (id != -1) {
            // Update existing cost
            me.updateOpportunityCosts(id, oppty_id, cost_type_id, accrual_type_id, cost, function (store) {
                me.getHiddenList().setStore(store);
            });
        } else {
            // Create new cost
            me.saveOpportunityCost(oppty_id, cost_type_id, accrual_type_id, cost, function (store) {
                me.getHiddenList().setStore(store);
            });
        }
    },

    onSaveVFButtonTap: function(button, e, eOpts) {
        var VFPanel,
            oppty_id = DecisionLink.app.getCurrentOpptyId(),
            metric_id,
            sqq_value,
            sqq2_value,
            impact,
            unit_type_id,
            impact_source_type_id,
            me = this;

        VFPanel = me.getValueFormulaDetailPanel();
        metric_id = VFPanel.child('#metricIdField').getValue();
        sqq_value = VFPanel.child('#driverFactorValueField').getValue();
        sqq2_value = VFPanel.child('#financialFactorValueSpinner').getValue();
        impact = VFPanel.child('#improveFactorSpinner').getValue();
        unit_type_id = VFPanel.child('#unitTypeIdField').getValue();
        impact_source_type_id = VFPanel.child('#sourceSelectField').getValue();

        me.saveValueFormulaMetrics(metric_id, sqq_value, sqq2_value, impact, oppty_id, unit_type_id, impact_source_type_id, function (store) {
            me.getHiddenList().setStore(store);
        });
    },

    onSecondarySQQListItemTap: function(dataview, index, target, record, e, eOpts) {
        var details,
            name = record.get('name'),
            sqq2_id = record.get('sqq2_id'),
            sqq2_value = record.get('sqq2_value'),
            source_type_id = record.get('impact_per_unit_source_type_id'),
            me = this;

        Ext.Viewport.setMasked({message: 'Loading...'});

        details = Ext.create('DecisionLink.view.SecondarySQQDetailPanel', {
            title: 'Sales Question Details'
        });

        details.child('#salesQuestionField').setValue(name);
        details.child('#sqqAnswerField').setValue(sqq2_value);
        details.child('#sourceSelectField').setValue(source_type_id);
        details.child('#sqq2IdField').setValue(sqq2_id);

        Ext.Viewport.setMasked(false);

        this.getMainView().push(details);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onSaveSecondarySQQButtonTap: function(button, e, eOpts) {
        var detailPanel,
            oppty_id = DecisionLink.app.getCurrentOpptyId(),
            user_id = DecisionLink.app.getUserId(),
            sqq2_id,
            sqq2_value,
            impact_per_unit_source_type_id,
            me = this;

        detailPanel = me.getSecondarySQQDetailPanel();
        oppty_id = DecisionLink.app.getCurrentOpptyId();
        sqq2_id = detailPanel.child('#sqq2IdField').getValue();
        sqq2_value = detailPanel.child('#sqqAnswerField').getValue();
        impact_per_unit_source_type_id = detailPanel.child('#sourceSelectField').getValue();

        me.updateSecondarySQQ(oppty_id, user_id, sqq2_value, sqq2_id, impact_per_unit_source_type_id, function (store) {
            me.getHiddenList().setStore(store);
        });
    },

    onNewCostButtonTap: function(button, e, eOpts) {
        var details,
            cost_type_id = 0,
            cost = 0,
            accrual_type_id = 0,
            id = -1,
            me = this;

        Ext.Viewport.setMasked({message: 'Loading...'});

        details = Ext.create('DecisionLink.view.OpportunityCostDetailPanel', {
            title: 'Cost Details'
        });

        details.child('#costTypeSelectField').setValue(cost_type_id);
        details.child('#costValueField').setValue(cost);
        details.child('#accrualTypeSelectField').setValue(accrual_type_id);
        details.child('#costIdField').setValue(id);

        Ext.Viewport.setMasked(false);

        this.getMainView().push(details);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onDeleteCostButtonTap: function(button, e, eOpts) {
        var costPanel,
            oppty_id = DecisionLink.app.getCurrentOpptyId(),
            id,
            actionsheet,
            me = this;

        costPanel = me.getOpportunityCostDetailPanel();
        id = costPanel.child('#costIdField').getValue();

        actionsheet = costPanel.child('#deleteCostActionSheet');
        actionsheet.child('#costIdField').setValue(id);

        actionsheet.show();
    },

    onDeleteCostActionButtonTap: function(button, e, eOpts) {
        var costPanel,
            actionsheet,
            oppty_id = DecisionLink.app.getCurrentOpptyId(),
            id,
            actionsheet,
            me = this;

        costPanel = me.getOpportunityCostDetailPanel();
        actionsheet = costPanel.child('#deleteCostActionSheet');
        id = actionsheet.child('#costIdField').getValue();

        // Update existing cost
        me.deleteOpportunityCost(oppty_id, id, function (store) {
            me.getHiddenList().setStore(store);
        });

        actionsheet.hide();
    },

    onCancelCostActionButtonTap: function(button, e, eOpts) {
        var costPanel,
            actionsheet,
            me = this;

        costPanel = me.getOpportunityCostDetailPanel();
        actionsheet = costPanel.child('#deleteCostActionSheet');

        actionsheet.hide();
    },

    onSaveSituationButtonTap: function(button, e, eOpts) {
        var SituationPanel,
            user_id = DecisionLink.app.getUserId(),
            id = DecisionLink.app.getCurrentOpptyId(),
            scenario,
            competitors = '',
            areas,
            industries = '',
            baselines,
            wacc,
            term,
            store,
            me = this;

        SituationPanel = me.getOpportunitySituationPanel();
        scenario = SituationPanel.child('#customerTypeField').getValue();

        store = Ext.data.StoreManager.lookup('ScenarioCompetitorsStore');
        for (var i = 0; i < store.getCount(); i++) {
            if (i == (store.getCount() - 1) ) {
                competitors = competitors + store.getAt(i).data.name;
            } else {
                competitors = competitors + store.getAt(i).data.name + ',';
            }
        }

        areas = SituationPanel.child('#sellingIntoField').getValue();

        store = Ext.data.StoreManager.lookup('ScenarioIndustriesStore');
        for (var i = 0; i < store.getCount(); i++) {
            if (i == (store.getCount() - 1) ) {
                industries = industries + store.getAt(i).data.name;
            } else {
                industries = industries + store.getAt(i).data.name + ',';
            }
        }

        baselines = SituationPanel.child('#baselinesField').getValue();

        wacc = SituationPanel.child('#costOfCapitalField').getValue();
        term = SituationPanel.child('#termField').getValue();

        me.saveSellingScenario(user_id, id, scenario, competitors, areas, industries, baselines, wacc, term, function (store) {
            me.getHiddenList().setStore(store);
        });
    },

    onLoginPanelHide: function(component, eOpts) {
        var validated = DecisionLink.app.isValidated(),
            navBar = this.getNavBar(),
            homePanel = this.getHomePanel();

        if (validated) {
            rightButton = navBar.rightBox.query('button')[0];
            if (rightButton) {
                rightButton.destroy();
            }
            homePanel.child('#homeContainer').child('#searchField').show();
            homePanel.child('#homeContainer').child('#selectField').show();

        } else {
            homePanel.child('#homeContainer').child('#searchField').hide();
            homePanel.child('#homeContainer').child('#selectField').hide();
        }
    },

    onShowCurrencyButtonTap: function(button, e, eOpts) {
        var me = this;

        Ext.Viewport.setMasked({message: 'Loading...'});

        me.getCurrencies(function(store){
            me.getCurrencySelectField().setStore(store);
        });

        var panel = Ext.create('DecisionLink.view.ChangeCurrencyPanel', {
            title: 'Currency Preference'
        });

        this.getMainView().push(panel);

        this.getNavBar().leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();

        Ext.Viewport.setMasked(false);
    },

    onHomePanelActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var validated = DecisionLink.app.isValidated(),
            navBar = this.getNavBar();

        if (validated) {
            rightButton = navBar.rightBox.query('button')[0];
            if (rightButton) {
                rightButton.destroy();
            }
            newActiveItem.child('#homeContainer').child('#searchField').show();
            newActiveItem.child('#homeContainer').child('#selectField').show();

        } else {
            newActiveItem.child('#homeContainer').child('#searchField').hide();
            newActiveItem.child('#homeContainer').child('#selectField').hide();
        }
    },

    onDownloadImageTap: function(image, e, eOpts) {
        var url = image.downloadUrl;

        var panel = Ext.create('DecisionLink.view.SendAssetPanel', {
            title: 'Send Asset'
        });

        this.getMainView().push(panel);

        //window.open(url);
    },

    onLogoutButtonTap: function(button, e, eOpts) {
        Ext.Viewport.setMasked({message: 'Loading...'});

        var accountPanel = this.getAccountPanel();

        DecisionLink.app.setValidated(false);
        DecisionLink.app.setUserId(-1);
        DecisionLink.app.setAccountId(-1);

        DecisionLink.app.setCurrentCompanyId(-1);
        DecisionLink.app.setCurrentOpptyId(-1);
        DecisionLink.app.setCurrentIndustryId(-1);

        DecisionLink.app.setCurrentRevenue(-1);
        DecisionLink.app.setUserName(' ');
        DecisionLink.app.setEmail(' ');
        DecisionLink.app.setAccountName(' ');

        var navBar = this.getNavBar();
        button = navBar.rightBox.query('button')[0];
        if (!button) {
            navBar.add({
                xtype:'button',
                text: 'Login',
                align: 'right',
                itemId: 'login'
            });
        }
        navBar.leftBox.query('button')[0].destroy();

        panel = Ext.create('DecisionLink.view.HomePanel', {
            title: 'DecisionLink',
            userAlias: 'homepanel'
        });

        panel.child('#homeContainer').child('#searchField').setHidden(true);
        panel.child('#homeContainer').child('#selectField').setHidden(true);

        this.getMainView().push(panel);

        Ext.Viewport.setMasked(false);
    },

    onAccountPanelActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var account_name = DecisionLink.app.getAccountName(),
            username = DecisionLink.app.getUserName(),
            email = DecisionLink.app.getEmail(),
            me = this,
            accountPanel = me.getAccountPanel();

        accountPanel.child('#accountNameField').setValue(account_name);
        accountPanel.child('#usernameField').setValue(username);
        accountPanel.child('#emailField').setValue(email);

    },

    onSaveCurrencyButtonTap: function(button, e, eOpts) {
        var me = this,
            user_id = DecisionLink.app.getUserId(),
            currencyPanel = me.getChangeCurrencyPanel(),
            currency_pref = currencyPanel.child('#currencySelectField').getValue(),
            currency_pref_name = currencyPanel.child('#currencySelectField').getName();

        me.updateCurrencyPreference(user_id, currency_pref, currency_pref_name, function(store) {
            me.getHiddenList().setStore(store);
        });
    },

    onShowChangePasswordButtonTap: function(button, e, eOpts) {
        var panel = Ext.create('DecisionLink.view.ChangePasswordPanel', {
            title: 'Change Password'
        });

        this.getMainView().push(panel);

        this.getNavBar().leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onChangePasswordButtonTap: function(button, e, eOpts) {
        var me = this,
            panel = me.getChangePasswordPanel(),
            currentPassword = panel.child('#currentPasswordField').getValue(),
            newPassword = panel.child('#newPasswordField').getValue(),
            confirmPassword = panel.child('#confirmPasswordField').getValue(),
            user_id = DecisionLink.app.getUserId();

        if (newPassword === confirmPassword) {
            new_p = me.toMD5(newPassword);
            old_p = me.toMD5(currentPassword);
            me.updatePassword(user_id, old_p, new_p, function(store){
                me.getHiddenList().setStore(store);
            });
        } else {
            window.alert("Passwords do not match.");
        }

    },

    onNewVPButtonTap: function(button, e, eOpts) {
        var details,
            name = DecisionLink.app.getCurrentCompany(),
            revenue = DecisionLink.app.getCurrentRevenue(),
            me = this;

        revenue = '$' + DecisionLink.app.formatCurrency(revenue) + ' M';

        Ext.Viewport.setMasked({message: 'Loading...'});

        details = Ext.create('DecisionLink.view.NewVPPanel', {
            title: 'New Value Proposition'
        });

        me.getSolutions(user_id, function(store) {
            me.getSolutionsList().setStore(store);
        });

        details.child('#detailContainer').child('#companyNameField').setValue(name);
        details.child('#detailContainer').child('#totalRevenueField').setValue(revenue);

        Ext.Viewport.setMasked(false);

        this.getMainView().push(details);

        var navBar = this.getNavBar();
        navBar.leftBox.query('button')[1].hide();

        DecisionLink.app.incrementPagesFromHome();
    },

    onSaveVPButtonTap: function(button, e, eOpts) {
        var revenueCheck = Ext.ComponentQuery.query('newvppanel #accountRevenueCheckbox')[0],
            nameContainer = Ext.ComponentQuery.query('newvppanel #newInfoContainer #nameContainer')[0],
            solutionsList = this.getSolutionsList().getViewItems(),
            length = solutionsList.length,
            solutions = '',
            i,
            company_id = DecisionLink.app.getCurrentCompanyId(),
            user_id = DecisionLink.app.getUserId(),
            wacc = 0,
            oppty_revenue,
            name = nameContainer.child('#nameField').getValue(),
            me = this;

        for (i = 0; i < length; i++) {
            curr = solutionsList[i].getItems().items[0];
            if ( curr.isChecked() ) {
                solutions = solutions + curr.getValue() + ',';
            }
        }
        solutions = solutions.substring(0, solutions.length - 1);

        if (revenueCheck.isChecked()) {
            oppty_revenue = Ext.ComponentQuery.query('newvppanel #detailContainer #companyRevenueField')[0].getValue();
        } else {
            oppty_revenue = '';
        }

        me.saveOpportunity(company_id, user_id, name, wacc, oppty_revenue, solutions, function(store) {
            me.getHiddenList().setStore(store);

            me.getCompanyScenarios(user_id, company_id, function(store) {
                me.getCompanyScenariosList().setStore(store);

            });
        });
    },

    onChangeRevenueCheck: function(checkboxfield, e, eOpts) {
        var detailContainer = Ext.ComponentQuery.query('newvppanel #detailContainer')[0];
        detailContainer.setHidden(false);
    },

    onChangeRevenueUncheck: function(checkboxfield, e, eOpts) {
        var detailContainer = Ext.ComponentQuery.query('newvppanel #detailContainer')[0];
        detailContainer.setHidden(true);
    },

    onCancelSendButtonTap: function(button, e, eOpts) {
        var assetPanel = this.getSendAssetPanel();
        assetPanel.destroy();
    },

    deleteOpportunityCost: function(oppty_id, id, callback) {
        var store = Ext.data.StoreManager.lookup('SuccessStore'),
            url = 'http://test.decisionlink.com/services/DeleteOpportunityCost1.php' +
            '?oppty_id=' + oppty_id +
            '&id=' + id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getSellingScenario: function(user_id, oppty_id, callback) {
        var store = Ext.data.StoreManager.lookup('ScenarioStore'),
            url = 'http://test.decisionlink.com/services/GetSellingScenario1.php' +
            '?user_id=' + user_id +
            '&oppty_id=' + oppty_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getKpis: function(user_id, company_id, industry_id, callback) {
        var store = Ext.data.StoreManager.lookup('KpisStore'),
            url = 'http://test.decisionlink.com/services/GetAlignedKpis1.php' +
            '?user_id=' + user_id +
            '&company_id=' + company_id +
            '&industry_id=' + industry_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getSalesQuestions: function(oppty_id, callback) {
        var store = Ext.data.StoreManager.lookup('SalesQuestionsStore'),
            url = 'http://test.decisionlink.com/services/GetOpportunitySQQs1.php' +
            '?oppty_id=' + oppty_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getCompanyScenarios: function(user_id, company_id, callback) {
        var store = Ext.data.StoreManager.lookup('CompanyScenariosStore'),
            url = 'http://test.decisionlink.com/services/GetOpportunities1.php' +
            '?user_id=' + user_id +
            '&company_id=' + company_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getSavedAccounts: function(id, callback) {
        var store = Ext.data.StoreManager.lookup('SavedStore'),
            url = 'http://test.decisionlink.com/services/GetSavedAccounts1.php' +
            '?user_id=' + id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getCompanyOverview: function(id, callback) {
        var store = Ext.data.StoreManager.lookup('DetailStore'),
            url = 'http://test.decisionlink.com/services/GetCompanyOverview1.php' +
            '?company_id=' + id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getDivisions: function(user_id, company_id, callback) {
        var store = Ext.data.StoreManager.lookup('DivisionsStore'),
            url = 'http://test.decisionlink.com/services/GetFamilyTree1.php' +
            '?user_id=' + user_id +
            '&company_id=' + company_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getValidation: function(username, password, callback) {
        var store = Ext.data.StoreManager.lookup('ValidateStore'),
            url = 'http://test.decisionlink.com/services' +
            '/ValidateUser1.php?loginUsername=' + username +
            '&loginPassword=' + password;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getAccountScenarios: function(account_id, callback) {
        var store = Ext.data.StoreManager.lookup('AccountScenariosStore'),
            url = 'http://test.decisionlink.com/services/GetAccountScenarios1.php' +
            '?account_id=' + account_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getOpportunityOverview: function(oppty_id, user_id, callback) {
        var store = Ext.data.StoreManager.lookup('OpportunityOverviewStore'),
            url = 'http://test.decisionlink.com/services/GetOpportunityOverview1.php' +
            '?oppty_id=' + oppty_id +
            '&user_id=' + user_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getValueFormulas: function(oppty_id, callback) {
        var store = Ext.data.StoreManager.lookup('ValueFormulasStore'),
            url = 'http://test.decisionlink.com/services/GetOpportunityMetrics1.php' +
            '?oppty_id=' + oppty_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getOpportunityCosts: function(oppty_id, user_id, callback) {
        var store = Ext.data.StoreManager.lookup('OpportunityCostsStore'),
            url = 'http://test.decisionlink.com/services/GetOpportunityCosts1.php' +
            '?oppty_id=' + oppty_id +
            '&user_id=' + user_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getOpportunityAssets: function(user_id, oppty_id, callback) {
        var store = Ext.data.StoreManager.lookup('AssetsStore'),
            url = 'http://test.decisionlink.com/services/GetOpportunityTypeAssets1.php' +
            '?oppty_id=' + oppty_id +
            '&user_id=' + user_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getDNBOverview: function(company_id, callback) {
        var store = Ext.data.StoreManager.lookup('DNBOverviewStore'),
            url = 'http://test.decisionlink.com/services/GetDNBAdditional.php' +
            '?company_id=' + company_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getCompetitors: function(user_id, company_id, callback) {
        var store = Ext.data.StoreManager.lookup('CompetitorsStore'),
            url = 'http://test.decisionlink.com/services/GetCompetitors1.php' +
            '?user_id=' + user_id +
            '&company_id=' + company_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getEmployees: function(company_id, callback) {
        var store = Ext.data.StoreManager.lookup('EmployeesStore'),
            url = 'http://test.decisionlink.com/services/GetExecutives1.php' +
            '?company_id=' + company_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getClosestPeers: function(user_id, company_id, industry_id, revenue, callback) {
        var store = Ext.data.StoreManager.lookup('ClosestPeersStore'),
            url = 'http://test.decisionlink.com/services/GetEnginePeers1.php' +
            '?user_id=' + user_id +
            '&company_id=' + company_id +
            '&industry_id=' + industry_id +
            '&revenue=' + revenue;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getRatios: function(user_id, company_id, kpi_id, callback) {
        var store = Ext.data.StoreManager.lookup('RatiosStore'),
            url = 'http://test.decisionlink.com/services/GetAlignedKpiRatios1.php' +
            '?user_id=' + user_id +
            '&company_id=' + company_id +
            '&kpi_id=' + kpi_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getScenarioIndustries: function(user_id, oppty_id, callback) {
        var store = Ext.data.StoreManager.lookup('ScenarioIndustriesStore'),
            url = 'http://test.decisionlink.com/services/GetSellingScenario1.php' +
            '?user_id=' + user_id +
            '&oppty_id=' + oppty_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getSecondarySQQs: function(oppty_id, callback) {
        var store = Ext.data.StoreManager.lookup('SecondarySQQStore'),
            url = 'http://test.decisionlink.com/services/GetOpportunitySecondarySQQs1.php' +
            '?oppty_id=' + oppty_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getCompRatios: function(user_id, company_id, callback) {
        var store = Ext.data.StoreManager.lookup('CompRatiosStore'),
            url = 'http://test.decisionlink.com/services/GetRatios1.php' +
            '?user_id=' + user_id +
            '&company_id=' + company_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getScenarioAreas: function(user_id, oppty_id, callback) {
        var store = Ext.data.StoreManager.lookup('ScenarioAreasStore'),
            url = 'http://test.decisionlink.com/services/GetSellingScenario1.php' +
            '?user_id=' + user_id +
            '&oppty_id=' + oppty_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getScenarioBaselines: function(user_id, oppty_id, callback) {
        var store = Ext.data.StoreManager.lookup('ScenarioBaselinesStore'),
            url = 'http://test.decisionlink.com/services/GetSellingScenario1.php' +
            '?user_id=' + user_id +
            '&oppty_id=' + oppty_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getScenarioCompetitors: function(user_id, oppty_id, callback) {
        var store = Ext.data.StoreManager.lookup('ScenarioCompetitorsStore'),
            url = 'http://test.decisionlink.com/services/GetSellingScenario1.php' +
            '?user_id=' + user_id +
            '&oppty_id=' + oppty_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    saveSellingScenario: function(user_id, id, scenario, competitors, areas, industries, baselines, wacc, term, callback) {
        var store = Ext.data.StoreManager.lookup('SuccessStore'),
            url = 'http://test.decisionlink.com/services/SaveSellingScenario.php' +
            '?user_id=' + user_id +
            '&id=' + id +
            '&scenario=' + scenario +
            '&competitors=' + competitors +
            '&areas=' + areas +
            '&success_factors=' + success_factors +
            '&business_factors=' + business_factors +
            '&industries=' + industries +
            '&baselines=' + baselines +
            '&wacc=' + wacc +
            '&term=' +term;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    saveOpportunityCost: function(oppty_id, cost_type_id, accrual_type_id, cost, callback) {
        var store = Ext.data.StoreManager.lookup('SuccessStore'),
            url = 'http://test.decisionlink.com/services/SaveOpportunityCost1.php' +
            '?oppty_id=' + oppty_id +
            '&cost_type_id=' + cost_type_id +
            '&accrual_type_id=' + accrual_type_id +
            '&cost=' + cost;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    saveValueFormulaMetrics: function(metric_id, sqq_value, sqq2_value, impact, oppty_id, unit_type_id, impact_source_type_id, callback) {
        var store = Ext.data.StoreManager.lookup('SuccessStore'),
            url = 'http://test.decisionlink.com/services/SaveValueFormulaMetrics1.php' +
            '?metric_id=' + metric_id +
            '&sqq_value=' + sqq_value +
            '&sqq2_value=' + sqq2_value +
            '&impact=' + impact +
            '&oppty_id=' + oppty_id +
            '&unit_type_id=' + unit_type_id +
            '&impact_source_type_id=' + impact_source_type_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    searchCompanies: function(searchTerm, option, callback) {
        var store = Ext.data.StoreManager.lookup('SearchStore'),
            url = 'http://test.decisionlink.com/services' +
            '/SearchCompanies1.php?searchTerm=' + searchTerm +
            '&searchOption=' + option;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    updateOpportunityCosts: function(id, oppty_id, cost_type_id, accrual_type_id, cost, callback) {
        var store = Ext.data.StoreManager.lookup('SuccessStore'),
            url = 'http://test.decisionlink.com/services/UpdateOpportunityCosts1.php' +
            '?id=' + id +
            '&oppty_id=' + oppty_id +
            '&cost_type_id=' + cost_type_id +
            '&accrual_type_id=' + accrual_type_id +
            '&cost=' + cost;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    updateOpportunitySQQ: function(sqq_id, sqq_override, source_type_id, oppty_id, callback) {
        var store = Ext.data.StoreManager.lookup('SuccessStore'),
            url = 'http://test.decisionlink.com/services/UpdateOpportunitySQQ1.php' +
            '?sqq_id=' + sqq_id +
            '&sqq_override=' + sqq_override +
            '&source_type_id=' + source_type_id +
            '&oppty_id=' + oppty_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    updateSecondarySQQ: function(oppty_id, user_id, sqq2_value, sqq2_id, impact_per_unit_source_type_id, callback) {
        var store = Ext.data.StoreManager.lookup('SuccessStore'),
            url = 'http://test.decisionlink.com/services/UpdateOpportunitySecondarySQQ1.php' +
            '?oppty_id=' + oppty_id +
            '&user_id=' + user_id +
            '&sqq2_value=' + sqq2_value +
            '&sqq2_id=' + sqq2_id +
            '&impact_per_unit_source_type_id=' + impact_per_unit_source_type_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    updatePassword: function(user_id, oldPassword, newPassword, callback) {
        var store = Ext.data.StoreManager.lookup('SuccessStore'),
            url = 'http://test.decisionlink.com/services' +
            '/ChangePassword1.php?user_id=' + user_id +
            '&oldPassword=' + oldPassword +
            '&newPassword=' + newPassword;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    updateCurrencyPreference: function(user_id, currency_pref, currency_pref_name, callback) {
        var store = Ext.data.StoreManager.lookup('SuccessStore'),
            url = 'http://test.decisionlink.com/services' +
            '/ChangeCurrencyPreference1.php?user_id=' + user_id +
            '&currency_pref=' + currency_pref +
            '&currency_pref_name=' + currency_pref_name;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getCurrencies: function(callback) {
        var store = Ext.data.StoreManager.lookup('CurrenciesStore'),
            url = 'http://test.decisionlink.com/services/GetCurrencies1.php';
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    saveOpportunity: function(company_id, user_id, name, wacc, oppty_revenue, solutions, callback) {
        var store = Ext.data.StoreManager.lookup('SuccessStore'),
            url = 'http://test.decisionlink.com/services/SaveOpportunity1.php' +
            '?company_id=' + company_id +
            '&user_id=' + user_id +
            '&name=' + name +
            '&wacc=' + wacc +
            '&oppty_revenue=' + oppty_revenue +
            '&solutions=' + solutions;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    getSolutions: function(user_id, callback) {
        var store = Ext.data.StoreManager.lookup('SolutionsStore'),
            url = 'http://test.decisionlink.com/services/GetSolutions1.php' +
            '?user_id=' + user_id;
        store.getProxy().setUrl(url);
        store.load(function() {
            callback(store);
        });
    },

    toMD5: function(str) {

            var xl;

            var rotateLeft = function (lValue, iShiftBits) {
                return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));
            };

            var addUnsigned = function (lX, lY) {
                var lX4, lY4, lX8, lY8, lResult;
                lX8 = (lX & 0x80000000);
                lY8 = (lY & 0x80000000);
                lX4 = (lX & 0x40000000);
                lY4 = (lY & 0x40000000);
                lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
                if (lX4 & lY4) {
                    return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
                }
                if (lX4 | lY4) {
                    if (lResult & 0x40000000) {
                        return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
                    } else {
                        return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
                    }
                } else {
                    return (lResult ^ lX8 ^ lY8);
                }
            };

            var _F = function (x, y, z) {
                return (x & y) | ((~x) & z);
            };
            var _G = function (x, y, z) {
                return (x & z) | (y & (~z));
            };
            var _H = function (x, y, z) {
                return (x ^ y ^ z);
            };
            var _I = function (x, y, z) {
                return (y ^ (x | (~z)));
            };

            var _FF = function (a, b, c, d, x, s, ac) {
                a = addUnsigned(a, addUnsigned(addUnsigned(_F(b, c, d), x), ac));
                return addUnsigned(rotateLeft(a, s), b);
            };

            var _GG = function (a, b, c, d, x, s, ac) {
                a = addUnsigned(a, addUnsigned(addUnsigned(_G(b, c, d), x), ac));
                return addUnsigned(rotateLeft(a, s), b);
            };

            var _HH = function (a, b, c, d, x, s, ac) {
                a = addUnsigned(a, addUnsigned(addUnsigned(_H(b, c, d), x), ac));
                return addUnsigned(rotateLeft(a, s), b);
            };

            var _II = function (a, b, c, d, x, s, ac) {
                a = addUnsigned(a, addUnsigned(addUnsigned(_I(b, c, d), x), ac));
                return addUnsigned(rotateLeft(a, s), b);
            };

            var convertToWordArray = function (str) {
                var lWordCount;
                var lMessageLength = str.length;
                var lNumberOfWords_temp1 = lMessageLength + 8;
                var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
                var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
                var lWordArray = new Array(lNumberOfWords - 1);
                var lBytePosition = 0;
                var lByteCount = 0;
                while (lByteCount < lMessageLength) {
                    lWordCount = (lByteCount - (lByteCount % 4)) / 4;
                    lBytePosition = (lByteCount % 4) * 8;
                    lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount) << lBytePosition));
                    lByteCount++;
                }
                lWordCount = (lByteCount - (lByteCount % 4)) / 4;
                lBytePosition = (lByteCount % 4) * 8;
                lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);
                lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
                lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
                return lWordArray;
            };

            var wordToHex = function (lValue) {
                var wordToHexValue = "",
                    wordToHexValue_temp = "",
                    lByte, lCount;
                for (lCount = 0; lCount <= 3; lCount++) {
                    lByte = (lValue >>> (lCount * 8)) & 255;
                    wordToHexValue_temp = "0" + lByte.toString(16);
                    wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length - 2, 2);
                }
                return wordToHexValue;
            };

            var x = [],
                k, AA, BB, CC, DD, a, b, c, d, S11 = 7,
                S12 = 12,
                S13 = 17,
                S14 = 22,
                S21 = 5,
                S22 = 9,
                S23 = 14,
                S24 = 20,
                S31 = 4,
                S32 = 11,
                S33 = 16,
                S34 = 23,
                S41 = 6,
                S42 = 10,
                S43 = 15,
                S44 = 21;

            // str = this.utf8_encode(str);
            x = convertToWordArray(str);
            var a = 0x67452301;
            var b = 0xEFCDAB89;
            var c = 0x98BADCFE;
            var d = 0x10325476;

            xl = x.length;
            for (k = 0; k < xl; k += 16) {
                AA = a;
                BB = b;
                CC = c;
                DD = d;
                a = _FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
                d = _FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
                c = _FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
                b = _FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
                a = _FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
                d = _FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
                c = _FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
                b = _FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
                a = _FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
                d = _FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
                c = _FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
                b = _FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
                a = _FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
                d = _FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
                c = _FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
                b = _FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
                a = _GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
                d = _GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
                c = _GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
                b = _GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
                a = _GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
                d = _GG(d, a, b, c, x[k + 10], S22, 0x2441453);
                c = _GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
                b = _GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
                a = _GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
                d = _GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
                c = _GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
                b = _GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
                a = _GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
                d = _GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
                c = _GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
                b = _GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
                a = _HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
                d = _HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
                c = _HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
                b = _HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
                a = _HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
                d = _HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
                c = _HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
                b = _HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
                a = _HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
                d = _HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
                c = _HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
                b = _HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
                a = _HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
                d = _HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
                c = _HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
                b = _HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
                a = _II(a, b, c, d, x[k + 0], S41, 0xF4292244);
                d = _II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
                c = _II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
                b = _II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
                a = _II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
                d = _II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
                c = _II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
                b = _II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
                a = _II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
                d = _II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
                c = _II(c, d, a, b, x[k + 6], S43, 0xA3014314);
                b = _II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
                a = _II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
                d = _II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
                c = _II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
                b = _II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
                a = addUnsigned(a, AA);
                b = addUnsigned(b, BB);
                c = addUnsigned(c, CC);
                d = addUnsigned(d, DD);
            }

            var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);

            return temp.toLowerCase();
    }

});